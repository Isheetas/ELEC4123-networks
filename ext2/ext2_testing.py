from ext2_utility import *

'''
ext2_debug.py
'''

#128 key size: msg smaller than 128 bits
def rsa_1():

    n = '252837207378338387332619197259204540353'
    d = '48393883292703003300067554859838128129'
    e = '65537'
    msg = b'\x01Brian\x0f\t \x07?'      #size 11 msg -> 88bits << 128bits

    assert(len(msg) == 11)

    enc = encrypt_rsa(msg, n, e)
    dec = decrypt_rsa(enc, n, d)

    assert(msg == dec)
    print("RSA test passed for smaller than key size")

#128 key size: msg larger than 128 bits
def rsa_2():

    n = '252837207378338387332619197259204540353'
    d = '48393883292703003300067554859838128129'
    e = '65537'
    msg = b'2Kevin\x10\x0c\x17\x069Ryan \x10\t+\x08LMiss \x0f\x0c%\x05EErica\x06\x0c"\x059Susan\x11\x04\x12\x07.Megan\x0e\x0c\x1f\x08ACraig\x0f\x0c\x12\x052Tonya\x14\t \x04ADavid\x0f\x04#\x07=Tracy\x12\x0c\x1c\tCGene \x16\x07%\x07IKelly\x0c\x0e+\x08MKelly\x14\x08\x11\x085James\x15\x0f\x1f\x04GAdam \x12\x0f+\x08TMandy\x0c\n \n@Gail \x12\x08"\x08DNancy\x12\x0b2\x07VJames\x17\r\x12\x06<Don  \r\x0c#\x07CShawn\x0f\x0b\x13\x052Mary \x10\x0b\x18\x07:Raven\x12\x0b\x1f\tEMaria\x10\x04\'\x04?Adam \x0f\x0b,\x04JScott\x0b\t\x10\x08,Lisa \x0e\t!\x08@Kerri\x12\n!\x05BDawn \x11\x08\x1f\x04<Lucas\x0b\x082\x07LSarah\x0e\x08\'\x07DPenny\x13\x0c%\x05IBeth \x11\x0c1\x05SJohn \x10\t,\x05JLuis \x0c\t\x1f\x07;Bryan\r\x08\x1d\x08:April\x0b\x0e\x1d\x04:David\x10\x07\x1f\x07=Tracy\x0e\x0b.\x08OJames\r\n \x06=Jon  \x0c\x0b"\x06?Megan\x11\t\x19\t<James\x0f\n \x07@Brian\x0f\x07\x1c\x068Kevin\x15\r-\x05TEdwin\x10\x0c$\x07GJaime\x13\x0c*\x02KErin \x0e\r\x1c\nAJanet\x12\x0c\x1f\x04AJose \n\n+\tH'      #size 11 msg -> 88bits << 128bits

    assert(len(msg) == 501)
    enc = encrypt_rsa(msg, n, e)
    dec = decrypt_rsa(enc, n, d)

    assert(msg == dec)

    print("RSA test passed for larger than key size")

def rsa_2():

    n = '252837207378338387332619197259204540353'
    d = '48393883292703003300067554859838128129'
    e = '65537'

    msg = b'dEric \x13\r2\n\\David\x10\x07\x1e\x08=Amy  \x15\x08 \x08ETroy \n\t.\x04ERyan \x12\n2\x05SKaren\r\x07\x1e\x057April\x15\n%\x06JKyle \x11\x07\x1c\x059David\x10\x08 \x04<John \x12\x0b\x15\x079Billy\x19\x0b*\x05SRoger\x0e\x05\x1c\x065Marie\x0f\t!\x07@Scott\x13\x06\'\x08HKeith\n\x0c\x15\x083Amy  \x15\t\'\x06KTony \x0f\x0b,\x08NMolly\r\t\x1c\t;Raven\x12\r.\tVShaun\x13\x0c$\tLJay  \x07\x05\'\x07:John \x13\x08\x1c\x08?Emily\x12\x06&\x08FLeah \x12\n\x1e\x08BDiana\x13\r\x1d\nGJose \x12\x08\x19\x07:Paula\x0e\x0c#\x04ALance\x0f\r&\x07IMary \x12\t\x1a\x06;Nancy\x18\x05)\x04JAdam \x16\x0e*\nXApril\x15\n%\x06JJesus\x0e\x06!\t>Brian\x0b\x07\x19\x083James\x16\t \tHJimmy\x11\t\'\x07HShane\x10\x0b$\x06EKathy\x18\x0b\x18\x05@Mark \x0f\t"\x05?Kelli\x17\x0f-\x07ZFaith\x13\x0b$\x02DMaria\x0b\n\x1d\x08:Mary \x0e\n \x07?Allen\x0f\x0f\x1c\x05?David\x18\x07\x1a\x07@Scott\x14\x0b%\x05IScott\x15\x0f\x1a\x08FScott\x10\x08%\x04ALisa \x18\x0c\x18\tEWayne\x12\x07#\x06BTracy\x10\r\x1a\x07>Eric \x12\x0b2\x07VLacey\t\x06,\x06AAmber\x17\x08\x1d\tEJames\x0e\x08%\x07BDavid\x14\x0f+\x06TMark \x12\x0c)\tPMarc \x0f\r&\x07IDan  \r\x0b2\x08RKaren\t\t(\x06@James\x14\x08#\x07FLisa \x0f\x0b\x19\x07:Carl \x17\x0c \x06IKara \x19\x0b&\x07QRyan \x15\x0b/\x06UMark \x16\n#\x07JPaige\x0e\x061\x04IDavid\x14\x0f+\x06TKayla\n\x0b$\x04=Adam \x11\t\x16\x066Sarah\r\x06+\x07ERyan \r\x04\x17\x05-Scott\x13\x06\'\x08HNancy\x12\x0b2\x07VTyler\x18\x0f\x13\x06@Luke \r\n \x08?Bryan\x0f\x05\x1a\x086Beth \x12\x0b&\x06IJohn \r\x06\x1a\x063Kevin\x18\n$\nPAnn  \x15\t#\x06GTammy\x0e\t%\x06BRalph\x12\x0c\x1f\tFJohn \x01\x082\nEAlex \x0e\t+\x08JAmy  \x0e\x082\x04LDavid\x12\n1\x06SHelen\x08\x07\'\x08>David\t\x0e\x1e\x07<Erica\x14\t2\x05TJay  \x12\x07"\tDBlake\x11\x08-\x07MAmy  \x11\n\x1b\x08>Jesse\x0b\x06\x16\x07.Renee\x13\x07,\x06LJenny\x17\n"\x05HJesus\x0b\x08"\x08=Jason\x0e\x07\x19\x064Karen\x10\t\x1d\x04:Julie\x19\x0e1\x07_'

    assert(len(msg) == 1001)
    enc = encrypt_rsa(msg, n, e)
    dec = decrypt_rsa(enc, n, d)
    enc2 = encrypt_rsa(dec, n, e)

    assert(msg == dec)
    assert(enc == enc2)

    print("RSA test passed for larger than key size")

def display_test():
    msg = b'2Kevin\x10\x0c\x17\x069Ryan \x10\t+\x08LMiss \x0f\x0c%\x05EErica\x06\x0c"\x059Susan\x11\x04\x12\x07.Megan\x0e\x0c\x1f\x08ACraig\x0f\x0c\x12\x052Tonya\x14\t \x04ADavid\x0f\x04#\x07=Tracy\x12\x0c\x1c\tCGene \x16\x07%\x07IKelly\x0c\x0e+\x08MKelly\x14\x08\x11\x085James\x15\x0f\x1f\x04GAdam \x12\x0f+\x08TMandy\x0c\n \n@Gail \x12\x08"\x08DNancy\x12\x0b2\x07VJames\x17\r\x12\x06<Don  \r\x0c#\x07CShawn\x0f\x0b\x13\x052Mary \x10\x0b\x18\x07:Raven\x12\x0b\x1f\tEMaria\x10\x04\'\x04?Adam \x0f\x0b,\x04JScott\x0b\t\x10\x08,Lisa \x0e\t!\x08@Kerri\x12\n!\x05BDawn \x11\x08\x1f\x04<Lucas\x0b\x082\x07LSarah\x0e\x08\'\x07DPenny\x13\x0c%\x05IBeth \x11\x0c1\x05SJohn \x10\t,\x05JLuis \x0c\t\x1f\x07;Bryan\r\x08\x1d\x08:April\x0b\x0e\x1d\x04:David\x10\x07\x1f\x07=Tracy\x0e\x0b.\x08OJames\r\n \x06=Jon  \x0c\x0b"\x06?Megan\x11\t\x19\t<James\x0f\n \x07@Brian\x0f\x07\x1c\x068Kevin\x15\r-\x05TEdwin\x10\x0c$\x07GJaime\x13\x0c*\x02KErin \x0e\r\x1c\nAJanet\x12\x0c\x1f\x04AJose \n\n+\tH'      #size 11 msg -> 88bits << 128bits
    assert(len(msg) == 501)
    print_to_ascii(msg)



def main():
    print("Test 1 in process")
    rsa_1()
    print("Test 2 in process")
    rsa_2()
    print("Test 2 in process")
    display_test()


if __name__ == "__main__":
    main()



